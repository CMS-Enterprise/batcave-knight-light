pipeline {
  agent {
    kubernetes {
      yaml """
      apiVersion: v1
      kind: Pod
      spec:
        restartPolicy: Never
        containers:
        - name: build-php
          // image: artifactory.cloud.cms.gov/batcave-docker-local/drupal/drupal-pipeline-image:latest
          image: artifactory.cloud.cms.gov/docker/drupal:10.3.0-php8.3-fpm-alpine3.20
          // image: artifactory.cloud.cms.gov/docker/php:8.2.20-fpm-alpine3.20
          command: ['tail', '-f', '/dev/null']
      """
    }
  }

  stages {
    stage('Build PHP') {
      steps {
        container('build-php') {
          dir('php-server') {
            sh 'cat /etc/os-release'
            sh 'ls -ltr'
            sh 'composer install --no-progress --no-interaction --no-dev --optimize-autoloader --prefer-dist'
          }
        }
      }
    }

    stage ('Test') {
      parallel {
        stage('Unit Test') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              container('build-php') {
                dir('php-server') {
                  sh 'mkdir -p coverage && vendor/bin/phpunit --log-junit coverage/unitreport.xml tests/'
                }
              }
            }
          }
        }
        stage('Lint') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              container('build-php') {
                dir('php-server') {
                  sh 'vendor/bin/phpstan analyse vendor/palantirnet/drupal-rector/phpstan.neon'
                  sh 'vendor/bin/rector -- --dry-run'
                }
              }
            }
          }
        }
      }
    }

    stage('Delivery') {
      steps {
        catchError (buildResult: currentBuild.currentResult, stageResult: 'UNSTABLE') {
            build(job: 'Php Delivery', wait: true, propagate: true, parameters: [
                string(name: 'image', value: "artifactory.cloud.cms.gov/docker/drupal:10.3.0-php8.3-fpm-alpine3.20"),
                string(name: 'tag', value: "${GIT_COMMIT[0..7]}"),
                string(name: 'git_repository', value: "${scm.userRemoteConfigs[0].url}"),
                string(name: 'git_credentials', value: "${scm.userRemoteConfigs[0].credentialsId}"),
                string(name: 'git_commit', value: "${GIT_COMMIT}"),
                string(name: 'build_dir', value: 'php-server'),
                string(name: 'dockerfile', value: 'php-server/dockerfile')
            ])
            container('build-php') {
                echo 'Child pipeline completed'
            }
        }
      }
    }
  }
}



            // sh '''
            //   php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            //   php -r "if (hash_file('sha384', 'composer-setup.php') === 'dac665fdc30fdd8ec78b38b9800061b4150413ff2e3b6f88543c636f7cd84f6db9189d43a81e5503cda447da73c7e5b6') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
            //   php composer-setup.php
            //   php -r "unlink('composer-setup.php');"
            // '''
            // sh '''
            // apk update && apk upgrade
            // apk add php-cli \
            //      php-json \
            //      php-mbstring \
            //      php-xml \
            //      php-xdebug
            // '''
            // sh 'mv composer.phar /usr/local/bin/composer'



            // sh 'which php'
            // sh '''
            //   php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            //   php -r "if (hash_file('sha384', 'composer-setup.php') === 'dac665fdc30fdd8ec78b38b9800061b4150413ff2e3b6f88543c636f7cd84f6db9189d43a81e5503cda447da73c7e5b6') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
            //   php composer-setup.php
            //   php -r "unlink('composer-setup.php');"
            // '''
            // sh 'mv composer.phar /usr/local/bin/composer'
            // sh 'which composer'
            // sh 'apk update && apk upgrade'
            // sh 'apk info git'
            // sh 'apk add git'
