pipeline {
  agent {
    kubernetes {
      yaml """
      apiVersion: v1
      kind: Pod
      spec:
        restartPolicy: Never
        containers:
        - name: build-php
          image: artifactory.cloud.cms.gov/docker/drupal:10.3.0-php8.3-fpm-alpine3.20
          command: ['tail', '-f', '/dev/null']
      """
    }
  }

  stages {
    stage('Build PHP') {
      steps {
        container('build-php') {
          dir('php-server') {
            sh 'cat /etc/os-release'
            sh 'php -v'
            sh 'composer install --no-progress --no-interaction --no-dev --optimize-autoloader --prefer-dist'
          }
        }
      }
    }

    stage ('Test') {
      parallel {
        stage('Unit Test') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              container('build-php') {
                dir('php-server') {
                  sh 'mkdir -p coverage && vendor/bin/phpunit --log-junit coverage/unitreport.xml tests/'
                }
              }
            }
          }
        }
        stage('Lint') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              container('build-php') {
                dir('php-server') {
                  sh 'vendor/bin/phpstan analyse vendor/palantirnet/drupal-rector/phpstan.neon'
                  sh 'vendor/bin/rector -- --dry-run'
                }
              }
            }
          }
        }
      }
    }

    stage('Delivery') {
      steps {
        catchError (buildResult: currentBuild.currentResult, stageResult: 'UNSTABLE') {
            build(job: 'PHP Server Delivery', wait: true, propagate: true, parameters: [
                string(name: 'image', value: "artifactory.cloud.cms.gov/docker/drupal"),
                string(name: 'tag', value: "${GIT_COMMIT[0..7]}"),
                string(name: 'git_repository', value: "${scm.userRemoteConfigs[0].url}"),
                string(name: 'git_credentials', value: "${scm.userRemoteConfigs[0].credentialsId}"),
                string(name: 'git_commit', value: "${GIT_COMMIT}"),
                string(name: 'build_dir', value: 'php-server'),
                string(name: 'dockerfile', value: 'php-server/dockerfile')
            ])
            container('build-php') {
                echo 'Child pipeline completed'
            }
        }
      }
    }
  }
}
