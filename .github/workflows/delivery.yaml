on:
  workflow_call:
    inputs:
      image_tag:
        type: string
        description: Name to use when tagging the container image (e.g. `my-app:latest`)
      build_dir:
        type: string
        description: The directory of the project being built

env:
  WORKFLOW_ENGINE_VERSION: v0.0.1-rc.9
  OUTPUT_DIR: ./.artifacts

jobs:
  get_settings:
    runs-on: ubuntu-latest
    outputs:
      WORKFLOW_ENGINE_VERSION: ${{ steps.output.outputs.WORKFLOW_ENGINE_VERSION }}
    steps:
      - id: output
        run: |
          echo "WORKFLOW_ENGINE_VERSION=${{ env.WORKFLOW_ENGINE_VERSION }}" | tee -a $GITHUB_OUTPUT

  build_scan_publish_image:
    runs-on: ubuntu-latest
    needs: [get_settings]
    container:
      image: ghcr.io/cms-enterprise/batcave/workflow-engine:${{ needs.get_settings.outputs.WORKFLOW_ENGINE_VERSION }}
    steps:
      - uses: actions/checkout@v4

      - name: Image Build
        uses: CMS-Enterprise/batcave-workflow-engine/.github/actions/image-build@actions-v0.0.1-rc.9
        with:
          build_dir: "${{ inputs.build_dir }}"
          dockerfile: "${{ inputs.build_dir }}/Dockerfile"
          tag: ${{ inputs.image_tag }}

      - name: Image Scan
        uses: CMS-Enterprise/batcave-workflow-engine/.github/actions/image-scan@actions-v0.0.1-rc.9
        with:
          tag: ${{ inputs.image_tag }}
          artifact_dir: ${{ env.OUTPUT_DIR }}

      - name: Image Publish
        shell: sh
        run: |-
          export TEMP_IMAGE_TAG="ttl.sh/$(cat /proc/sys/kernel/random/uuid):30m"
          export BUNDLE_TAG="ttl.sh/$(cat /proc/sys/kernel/random/uuid):30m"
          # TODO: request the creation of a package at the Organization level or switch to artifactory
          docker tag ${{ inputs.image_tag }} $TEMP_IMAGE_TAG
          workflow-engine run image-publish --tag $TEMP_IMAGE_TAG --bundle-tag $BUNDLE_TAG --artifact-dir ${{ env.OUTPUT_DIR }}

      - name: Archive image scan outputs
        uses: actions/upload-artifact@v4
        with:
          name: image-scan-results
          path: |
            ${{ env.OUTPUT_DIR }}/*.txt
            ${{ env.OUTPUT_DIR }}/*.json
          if-no-files-found: error
