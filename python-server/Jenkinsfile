pipeline {
  agent {
    kubernetes {
      yaml """
      apiVersion: v1
      kind: Pod
      spec:
        restartPolicy: Never
        containers:
        - name: build
          image: artifactory.cloud.cms.gov/docker/python:3.12-alpine
          command: ['tail', '-f', '/dev/null']
      """
    }
  }

  environment {
    TARGET_DIR = "python-server"
    LINT_ARGS = "--disable=missing-docstring --disable=invalid-name"
    PIPENV_VERBOSITY= "-1"
  }

  options {
    buildDiscarder(logRotator(daysToKeepStr: '14', numToKeepStr: '100'))
    copyArtifactPermission('*');
  }

  stages {
    stage('Build Python') {
      steps {
        container('build') {
          sh 'python -m pip install --upgrade pip && python -m pip install pipenv'
          dir("${TARGET_DIR}") {
            sh '''
            ls -lah
            # Use an explicit virtual environment
            python -m venv .venv
            source .venv/bin/activate
            pipenv install --deploy --ignore-pipfile --dev
            pip freeze > requirements.txt
            '''
          }

          archiveArtifacts artifacts: 'python-server/.venv/**/*', allowEmptyArchive: true
          archiveArtifacts artifacts: 'python-server/requirements.txt', allowEmptyArchive: true
        }
      }
    }

    stage('Test & Lint') {
      parallel {
        stage('Test') {
          steps {
            container('build') {
              dir("${TARGET_DIR}") {
                sh '''
                source .venv/bin/activate
                pipenv run python -m coverage --version
                pipenv run python -m coverage run -m pytest
                pipenv run python -m coverage report
                pipenv run python -m coverage xml
                '''
                archiveArtifacts artifacts: "coverage.xml", allowEmptyArchive: true
              }
            }
          }
        }

        stage('Lint') {
          steps {
            catchError (buildResult: currentBuild.currentResult, stageResult: 'UNSTABLE') {
              container('build') {
                dir("${TARGET_DIR}") {
                  sh '''
                  echo "Linting '${TARGET_DIR}' with arguments '${LINT_ARGS}'"
                  source .venv/bin/activate
                  pipenv run python -m pylint --version
                  pipenv run python -m pylint ${LINT_ARGS} src
                  '''
                }
              }
            }
          }
        }
      }
    }

   stage('SAST') {
     steps {
       script {
         def pythonpath = 'python-server/.venv/lib64/python3.12/site-packages:python-server/.venv/lib/python3.12/site-packages'
         def sastParameters = [
           string(name: 'git_repository', value: "${scm.userRemoteConfigs[0].url}"),
           string(name: 'git_credentials', value: "${scm.userRemoteConfigs[0].credentialsId}"),
           string(name: 'git_commit', value: "${GIT_COMMIT}"),
           string(name: 'git_branch', value: "${env.GIT_BRANCH}"),
           string(name: 'copy_artifacts_job_name', value: "${env.JOB_NAME}"),
           string(name: 'copy_artifacts_build_number', value: "${env.BUILD_NUMBER}"),
           string(name: 'copy_artifacts_filter', value: 'coverage.xml,python-server/.venv/**/*,python-server/requirements.txt'),
           string(name: 'snyk_additional_env', value: "[ \"PYTHONPATH=${pythonpath}\" ]"),
           string(name: 'package_file', value: 'python-server/requirements.txt')
         ]

         if (env.CHANGE_ID) {
           sastParameters.add(string(name: 'git_change_id', value: "${env.CHANGE_ID}"))
         }

         build(job: 'Python Server SAST', wait: true, propagate: true, parameters: sastParameters)
       }
     }
   }

    stage('Delivery') {
      steps {
        build(job: 'Python Server Delivery', wait: true, propagate: true, parameters: [
          string(name: 'tag', value: "${GIT_COMMIT[0..7]}"),
          string(name: 'git_repository', value: "${scm.userRemoteConfigs[0].url}"),
          string(name: 'git_credentials', value: "${scm.userRemoteConfigs[0].credentialsId}"),
          string(name: 'git_commit', value: "${GIT_COMMIT}"),
          string(name: 'build_dir', value: 'python-server'),
          string(name: 'dockerfile', value: 'python-server/Dockerfile')
        ])
      }
    }
  }
}
