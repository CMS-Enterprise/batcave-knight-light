pipeline {
  agent {
    kubernetes {
      yaml """
      apiVersion: v1
      kind: Pod
      spec:
        restartPolicy: Never
        containers:
        - name: maven
          image: artifactory.cloud.cms.gov/docker/maven:3-amazoncorretto-21
          command: ['tail', '-f', '/dev/null']
      """
    }
  }
  environment {
    IMAGE_NAME = 'artifactory.cloud.cms.gov/batcave-docker/ado-repositories/nightwing/knight-light/jenkins-knight-light/java-server'
    IMAGE_TAG = "${GIT_COMMIT[0..7]}"
  }
  stages {
    stage('Build') {
      steps {
        container('maven') {
          dir('java-server') {
            sh 'mvn --no-transfer-progress package'
          }
        }
      }
    }

    stage('Test') {
      parallel {
        stage('Unit Test') {
          steps {
            container('maven') {
              dir('java-server') {
                sh 'mvn --no-transfer-progress test'
              }
            }
          }
        }
        stage('Lint') {
          steps {
            container('maven') {
              dir('java-server') {
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE', message: '[WARNING] Coding style issues detected!') {
                  sh 'mvn --no-transfer-progress checkstyle:check'
                }
              }
            }
          }
        }
        stage('SAST') {
          steps {
            script {
              def sastParameters = [
                string(name: 'git_repository', value: "${scm.userRemoteConfigs[0].url}"),
                string(name: 'git_credentials', value: "${scm.userRemoteConfigs[0].credentialsId}"),
                string(name: 'git_commit', value: "${GIT_COMMIT}"),
                string(name: 'git_branch', value: "${env.GIT_BRANCH}"),
              ]

              if (env.CHANGE_ID) {
                sastParameters.add(string(name: 'git_change_id', value: "${env.CHANGE_ID}"))
              }

              build(job: 'Java Server SAST', wait: true, propagate: true, parameters: sastParameters)
            }
          }
        }
      }
    }

    stage('Delivery') {
      steps {
        build(job: 'Java Server Delivery', wait: true, propagate: true, parameters: [
          string(name: 'tag', value: "${env.IMAGE_TAG}"),
          string(name: 'git_repository', value: "${scm.userRemoteConfigs[0].url}"),
          string(name: 'git_credentials', value: "${scm.userRemoteConfigs[0].credentialsId}"),
          string(name: 'git_commit', value: "${GIT_COMMIT}"),
          string(name: 'build_dir', value: 'java-server'),
          string(name: 'dockerfile', value: 'java-server/Dockerfile')
        ])
      }
    }
    stage('Deployment') {
    steps {
        catchError (buildResult: currentBuild.currentResult, stageResult: 'UNSTABLE') {
            build(job: 'Java Server Deployment', wait: true, propagate: true, parameters: [
              string(name: 'image', value: "${env.IMAGE_NAME}"),
              string(name: 'tag', value: "${env.IMAGE_TAG}")
            ])
        }
    }
  } 
 }
}
